parameters:
# parameters passed into stages.yaml template and nested steps templates for jobs and deployments 

# Code: dotNet Tests Params
- name: dotNetTests
  type: object
  default: ''
# dotNetTests:
  # - projects: '**[Uu]nit.[Tt]est*/*[Uu]nit.[Tt]est*.csproj' # Pattern search for unit test projects
  #   arguments: '--collect "Code Coverage" /p:CollectCoverage=true  /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Common.TestResultsDirectory)\Coverage\'
  #   displayName: 'dotNet Unit Tests'
  # - projects: '**[Cc][Ll][Ii].[Tt]est*/*[Cc][Ll][Ii].[Tt]est*.csproj' # Pattern search for cli test projects
  #   arguments: '--collect "Code Coverage" /p:CollectCoverage=true  /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Common.TestResultsDirectory)\Coverage\'
  #   displayName: 'dotNet CLI Tests'
- name: dotNetTestsParams
  type: object
  default: ''

# Code: sonarQube analysis of dotNet projects or solutions
- name: sonarQube # The sonarQube Service Connection name required to insert steps for using Azure Pipelines SonarQube Analysis extension
  type: string
  default: ''
- name: sonarQubeProjects # Nested into projects param of code analysis steps. This can be a Visual Studio solution (*.sln) or dotNet project (*.csproj) to build for SonarQube analysis
  type: string
  default: '*.csproj'
- name: sonarQubeParams
  type: object
  default: ''

# Code: Stage Params
- name: codePool # Pool for jobs in code stage jobs
  type: object
  default:
    vmImage: 'windows-latest'

# Build: dotNet Projects
- name: projects # Required param to restore and publish a dotNet project
  type: string
  default: '' # path or pattern match of projects to dotNet publish
# dotNetProject: '**.csproj'

# Build: Container Image Jobs
- name: containerRegistry # Required ADO Service Connection name for container image build jobs
  type: string
  default: '' 
- name: containerRepository # repo path in registry
  type: string
  default: '$(Build.DefinitionName)'
- name: dockerTags # Default tags to set in addition to pipeline metadata tags
  type: object
  default: $(Build.BuildNumber)
- name: dockerArgs # Optional param to pass build arguments to Docker
  type: string
  default: ''
- name: dockerContext
  type: string
  default: '$(Build.Repository.LocalPath)'

# Build: Multiple Container Images
- name: dockerFiles # list of container image build jobs
  type: object
  default: ''
# dockerFiles:
  # - job: containerImage1
  #   dockerFile: App1.Dockerfile
  #   containerRegistry: 'Docker' # Optional override of dockerRegistry parameter. Container registry service connection name
  #   containerRepository: 'App1' # Optional path within registry that overrides dockerRepository param. registry/repository/name:tag
  # - job: containerImage2
  #   dependsOn: containerImage1
  #   dockerFile: App2.Dockerfile
  #   containerRegistry: 'Docker' # Optional override of dockerRegistry parameter. Container registry service connection name
  #   containerRepository: 'App2' # Optional path within registry that overrides dockerRepository param. registry/repository/name:tag
  #   dockerArgs: '--build-arg repository=baseimages/dotnet/core/aspnet'
  #   dockerTags: '$(Build.BuildNumber)' # Optional list of image tags. Default is $(Build.BuildNumber)

# Build: Single Container Image
- name: dockerFile # Single dockerFile within dockerContext
  type: string
  default: ''

# Build: Stage Params
- name: buildPool # Pool param of build stage jobs
  type: object
  default: 
    vmImage: 'Ubuntu-16.04'

# Deploy: ARM Template Params
- name: armSubscription # Azure subscription service connection name for ARM template deployments
  type: string
  default: ''
- name: armResourceGroup # Azure Resource Group within the subscription for ARM template deployments
  type: string
  default: ''
# Deploy: Multiple ARM Templates
- name: armTemplates # List of ARM Template deployment jobs
  type: object
  default: ''
# armTemplates:
  # - deployment: 'armTemplate1' # deployment name must be unique
  #   template: 'deployment1.json'
  #   parameters: 'parameters1.json'
  # - deployment: 'armTemplate2' # deployment name must be unique
  #   template: 'deployment2.json'
  #   parameters: 'parameters2.json'
  # - deployment: 'armTemplate3' # deployment name must be unique
  #   template: 'deployment3.json'
  #   parameters: 'parameters3.json'
  #   subscription: 'subscriptionServiceConnectionName'
  #   resourceGroup: 'resourceGroupName'
  #   # Example when armTemplate3 dependsOn armTemplate1 and armTemplate2 succeeded
  #   dependsOn:
  #     - armTemplate1
  #     - armTemplate2
# Deploy: Single ARM Template
- name: armTemplate
  type: string
  default: ''
- name: armParameters
  type: string
  default: ''
- name: armOverrides
  type: string
  default: ''
# Deploy: ARM Template Optional Params
- name: armTemplatePath # Root path of ARM templates
  type: string
  default: '$(Build.Repository.LocalPath)'
- name: armReplaceTokens # Enable replace tokens task in ARM template deployment jobs
  type: boolean
  default: false

# Deploy: Kubernetes Manifests
- name: kubernetesServiceConnection # Kubernetes Service Connection Name
  type: string
  default: ''
- name: environment
  type: object
  default: ''
- name: namespace
  type: string
  default: default
- name: manifests # Deployment manifest for canary deploy, promote, and reject jobs
  type: object
  default: ''
- name: strategy
  type: string
  default: canary
  values:
  - runOnce
  - canary
- name: action # Default deploy; promote or reject prior canary kube deploy
  type: string
  default: deploy
  values:
  - deploy
  - scale
  - patch
  - delete

- name: kubeDeployments
  type: object
  default:
  - deployment: kubeDeploy

- name: kubeCanaryIncrements
  type: string
  default: '10'

# Deploy: Stage Params
- name: deploys
  type: object
  default:
    - deployment: deploy
      template: steps/deploy/kubeManifest.yaml
      strategy: canary
      manifests: '$(Pipeline.Workspace)/deployment.yaml'
- name: deployPool # Nested into pool param of deploy jobs
  type: object
  default:
    vmImage: 'ubuntu-18.04'
- name: deployCheckout
  type: string
  default: self
# Deploy: lifecycle hooks
- name: preDeploy # Deployment job preDeploy lifecycle hook
  type: stepList
  default: []
- name: routeTraffic # Deployment job routeTraffic lifecycle hook
  type: stepList
  default: []
- name: postRouteTraffic # Deployment job postRouteTraffic lifecycle hook
  type: stepList
  default: []
- name: onFailure # Deployment job on: failure: lifecycle hook
  type: stepList
  default: []
- name: onSuccess # Deployment job on: success: lifecycle hook
  type: stepList
  default: []
- name: deployKeys
  type: object
  default:
  - deployment
  - template
  - displayName
  - pool
  - workspace
  - dependsOn
  - condition
  - continueOnError
  - container
  - services
  - timeoutInMinutes
  - cancelTimeoutInMinutes
  - variables
  - environment
  - strategy
  - preDeploy
  - deploy
  - preSteps
  - steps
  - postSteps
  - routeTraffic
  - postRouteTraffic
  - on
  - onFailure
  - onSuccess

# Test: Stage Params
- name: tests
  type: object
  default: ''
# - template: steps/test/visualStudioTest.yaml
#   job: vsTest
- name: testPool # Pool for jobs in test stage jobs
  type: object
  default:
    vmImage: 'windows-latest'
- name: testVariables
  type: object
  default: ''
- name: testMatrix
  type: object
  default: ''
- name: testParallel
  type: number
  default: 1

# Globals: Optional Params
- name: stages # Optional to override default value of stages stageList in the stages.yaml template
  type: stageList
  default: ''
- name: stagesSuffix # Optional stage name suffix. e.g. Dev would make buildDev, deployDev, etc.
  type: string
  default: ''
- name: stagesPrefix # Optional stage name prefix. e.g. dev- would make dev-build, dev-deploy, etc.
  type: string
  default: ''
- name: stagesCondition # Optional param to override the condition of all stages
  type: string
  default: ''
- name: stagesVariables
  type: object
  default: ''
#- name: version
#  type: string
#  default: '3.1.x'
#- name: kubectlVersion # Kube installer if param defined
#  type: string
#  default: '1.18.6'
#- name: imagePullSecret
#  type: string
#  default: 'registry-cred'



stages:
  - template: stages.yaml
  # parameters: within stages.yaml
    parameters:
      stagesPrefix: ${{ parameters.stagesPrefix }}
      stagesSuffix: ${{ parameters.stagesSuffix }}
      stagesCondition: ${{ parameters.stagesCondition }}
      ${{ if parameters.stages }}:
      # If stages stageList param has value then override default stages value in stages.yaml template
        stages: ${{ parameters.stages }}
    # code: jobList inserted into code stage in stages
    # build: jobList inserted into build stage in stages param
    # deploy: deploymentList inserted into deploy stage in stages param
      deploy:
        # for each test in tests, insert job with steps template into test stage 
        - ${{ each deploy in parameters.deploys }}:
          - ${{ if and(deploy.deployment, deploy.template, in(deploy.strategy, 'runOnce', 'rolling', 'canary')) }}:
          # - deployment: name must be unique within stage
            - deployment: ${{ deploy.deployment }}
            # for each job param of deploy item in vsTests, insert param
              ${{ each parameter in deploy }}:
                ${{ if in(parameter.key, 'displayName', 'condition', 'continueOnError', 'pool', 'workspace', 'container', 'timeoutInMinutes', 'cancelTimeoutInMinutes', 'services') }}:
                  ${{ parameter.key }}: ${{ parameter.value }}
              # If deploy job depends on other jobs in deploy stage insert dependencies
              ${{ if deploy.dependsOn }}:
                dependsOn:
                - ${{ each dependency in deploy.dependsOn }}:
                  - ${{ dependency }}
              # If no deploy.dependsOn job does not depend on others
              ${{ if not(deploy.dependsOn) }}:
                dependsOn: []
              # If variables defined add key value pairs
              ${{ if or(deploy.variables, parameters.testVariables) }}:
                variables:
              # for each variable in deploy.variables, insert variables scoped to this job 
                ${{ each variable in deploy.variables }}:
                  ${{ variable.key }}: ${{ variable.value }}
              # for each variable in parameters.testVariables, insert global variables
                ${{ each variable in parameters.testVariables }}:
                  ${{ variable.key }}: ${{ variable.value }}
              # If no deploy.displayName use default
              ${{ if not(deploy.displayName) }}:
                displayName: '${{ deploy.job }}: ${{ deploy.template }}'
              # If no deploy.pool use parameters.deployPool value
              ${{ if and(not(deploy.pool), parameters.deployPool) }}:
                pool: ${{ parameters.deployPool }}

              strategy:
                ${{ deploy.strategy }}:
                  ${{ if or(deploy.preDeploy, parameters.preDeploy) }}:
                    preDeploy:
                      steps:
                        - ${{ if gt(length(deploy.preDeploy.steps), 0) }}:
                          - ${{ deploy.preDeploy.steps }}
                        - ${{ if gt(length(parameters.preDeploy), 0) }}:
                          - ${{ parameters.preDeploy }}
                      ${{ if deploy.preDeploy.pool }}:
                        pool: ${{ deploy.preDeploy.pool }}
                  deploy:
                    steps:
                      - template: ${{ deploy.template }}
                        parameters:
                          ${{ if gt(length(deploy.preSteps), 0) }}:
                            preSteps:
                            - ${{ each step in deploy.preSteps }}
                              - ${{ step }}
                        # for each parameter in deploy that is not a deployment parameter, these are the parameters for the steps template
                          ${{ each parameter in deploy }}:
                            ${{ if not(containsValue(parameters.deployKeys, parameter.key)) }}:
                              ${{ parameter.key }}: ${{ parameter.value }}
                          ${{ if gt(length(deploy.postSteps), 0) }}:
                            postSteps:
                            - ${{ each step in deploy.postSteps }}
                              - ${{ step }}
                  # routeTraffic lifecycle hook
                  ${{ if or(deploy.routeTraffic, parameters.routeTraffic) }}:
                    routeTraffic:
                      steps:
                        - ${{ if gt(length(deploy.routeTraffic.steps), 0) }}:
                          - ${{ deploy.routeTraffic.steps }}
                        - ${{ if gt(length(parameters.routeTraffic), 0) }}:
                          - ${{ parameters.routeTraffic }}
                      ${{ if deploy.routeTraffic.pool }}:
                        pool: ${{ deploy.routeTraffic.pool }}
                  # postRouteTraffic lifecycle hook
                  ${{ if or(deploy.postRouteTraffic, parameters.postRouteTraffic) }}:
                    postRouteTraffic:
                      steps:
                        - ${{ if gt(length(deploy.postRouteTraffic.steps), 0) }}:
                          - ${{ deploy.postRouteTraffic.steps }}
                        - ${{ if gt(length(parameters.postRouteTraffic), 0) }}:
                          - ${{ parameters.postRouteTraffic }}
                      ${{ if deploy.postRouteTraffic.pool }}:
                        pool: ${{ deploy.postRouteTraffic.pool }}
                  # onFailure lifecycle hook
                  ${{ if or(deploy.onFailure, parameters.onFailure, deploy.onSuccess, parameters.onSuccess) }}:
                    on:
                      ${{ if or(deploy.onSuccess, parameters.onSuccess) }}:
                        success:
                          steps:
                            - ${{ if gt(length(deploy.onSuccess.steps), 0) }}:
                              - ${{ deploy.onSuccess.steps }}
                            - ${{ if gt(length(parameters.onSuccess), 0) }}:
                              - ${{ parameters.onSuccess }}
                          ${{ if deploy.onSuccess.pool }}:
                            pool: ${{ deploy.onSuccess.pool }}
                      ${{ if or(deploy.onFailure, parameters.onFailure) }}:
                        failure:
                          steps:
                            - ${{ if deploy.onFailure.steps }}:
                              - ${{ deploy.onFailure.steps }}
                            - ${{ if parameters.onFailure }}:
                              - ${{ parameters.onFailure }}
                          ${{ if deploy.onFailure.pool }}:
                            pool: ${{ deploy.onFailure.pool }}


      # - job: insert additional jobs into the deploy stage
    # promote: deploymentList inserted into promote stage in stages param
    # reject: deploymentList inserted into reject stage in stages param
    # test: jobList inserted into test stage in stages param
      test:
        # for each test in tests, insert job with steps template into test stage 
        - ${{ each test in parameters.tests }}:
          - ${{ if and(test.job, test.template) }}:
          # - job: name must be unique within stage
            - job: ${{ test.job }}
            # for each job param of test item in vsTests, insert param
              ${{ each parameter in test }}:
                ${{ if in(parameter.key, 'displayName', 'condition', 'continueOnError', 'pool', 'workspace', 'container', 'timeoutInMinutes', 'cancelTimeoutInMinutes', 'services') }}:
                  ${{ parameter.key }}: ${{ parameter.value }}
              # If test job depends on other jobs in test stage insert dependencies
              ${{ if test.dependsOn }}:
                dependsOn:
                - ${{ each dependency in test.dependsOn }}:
                  - ${{ dependency }}
              # If no test.dependsOn job does not depend on others
              ${{ if not(test.dependsOn) }}:
                dependsOn: []
              # If variables defined add key value pairs
              ${{ if or(test.variables, parameters.testVariables) }}:
                variables:
              # for each variable in test.variables, insert variables scoped to this job 
                ${{ each variable in test.variables }}:
                  ${{ variable.key }}: ${{ variable.value }}
              # for each variable in parameters.testVariables, insert global variables
                ${{ each variable in parameters.testVariables }}:
                  ${{ variable.key }}: ${{ variable.value }}
              # If no test.displayName use default
              ${{ if not(test.displayName) }}:
                displayName: '${{ test.job }}: ${{ test.template }}'
              # If no test.pool use parameters.testPool value
              ${{ if and(not(test.pool), parameters.testPool) }}:
                pool: ${{ parameters.testPool }}
              # If test.matrix or test.parallel strategy for Visual Studio Test jobs
              ${{ if or(test.matrix, gt(test.parallel, 1)) }}:
                strategy:
                  ${{ if test.matrix }}:
                    matrix: ${{ test.matrix }}
                  ${{ if not(test.matrix) }}:
                    parallel: ${{ test.parallel }}
              # If the test has no test.matrix or test.parallel values then use parameters.matrix and parameters.parallel as default
              ${{ if and(or(parameters.testMatrix, gt(parameters.testParallel, 1)), not(test.matrix), le(test.parallel, 1)) }}:
                strategy:
                  ${{ if parameters.matrix }}:
                    matrix: ${{ parameters.matrix }}
                  ${{ if not(parameters.matrix) }}:
                    parallel: ${{ parameters.parallel }}
              steps:
                - template: ${{ test.template }}
                  parameters:
                    ${{ if gt(length(test.preSteps), 0) }}:
                      preSteps:
                      - ${{ each step in test.preSteps }}
                        - ${{ step }}
                  # for each parameter in test that is not a job parameter, these are the parameters for the steps template
                    ${{ each parameter in test }}:
                      ${{ if notIn(parameter.key, 'job', 'template', 'displayName', 'dependsOn', 'condition', 'strategy', 'matrix', 'parallel', 'continueOnError', 'pool', 'workspace', 'container', 'timeoutInMinutes', 'cancelTimeoutInMinutes', 'variables', 'steps', 'services', 'preSteps', 'postSteps') }}:
                        ${{ parameter.key }}: ${{ parameter.value }}
                    ${{ if gt(length(test.postSteps), 0) }}:
                      postSteps:
                      - ${{ each step in test.postSteps }}
                        - ${{ step }}
      # - job: insert additional jobs into the test stage
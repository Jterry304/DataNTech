parameters:
# jobsLists
- name: code # jobsList inserted into code stage in stages
  type: jobList
  default: []
- name: build # jobsList inserted into build stage in stages
  type: jobList
  default: []
- name: deploy # deploymentList inserted into deploy stage in stages
  type: deploymentList
  default: []
- name: test # jobList inserted into test stage in stages
  type: jobList
  default: []
- name: promote # deploymentList inserted into promote stage in stages
  type: deploymentList
  default: []

# stageList
- name: stages # Inserts each stage into stages
  type: stageList
  default:
  - stage: code # code jobList param inserted to this stage
    dependsOn: []
    condition: and(succeeded(), eq(variables['build.reason'], 'PullRequest'))
  - stage: build # build jobList param inserted to this stage
    dependsOn: code
    condition: and(succeeded(), in(variables['build.reason'], 'IndividualCI', 'BatchedCI', 'ResourceTrigger'))
  - stage: deploy # deploy jobList param inserted to this stage
    dependsOn: build
    condition: and(succeeded(), in(variables['build.reason'], 'IndividualCI', 'BatchedCI', 'ResourceTrigger', 'Manual'))
  - stage: test # test jobList param inserted to this stage
    dependsOn: deploy
    condition: succeeded()
  - stage: promote # promote jobList param inserted to this stage
    dependsOn: test
    condition: and(succeeded(), in(variables['build.reason'], 'IndividualCI', 'BatchedCI', 'ResourceTrigger', 'Manual'))

- name: stageSuffix # Optional stage name suffix. e.g. Dev
  type: string
  default: ''
- name: stagePrefix # Optional stage name prefix. e.g. Dev
  type: string
  default: ''

stages:
# For each stage in stages
- ${{ each stage in parameters.stages }}:
  # If stage name is code, build, deploy, test, or promote, then use jobList or deploymentList with matching name
  - ${{ if in(stage.stage, 'code', 'build', 'deploy', 'test', 'promote') }}:
    - ${{ each parameter in parameters }}:
      # If parameter name matches stage name insert parameter for job list in stage
      - ${{ if and(eq(parameter.name, stage.stage), gt(length(parameter.value), 0)) }}:
        - stage: '${{ parameters.stagePrefix }}${{ stage.stage }}${{ parameters.stageSuffix }}'
          ${{ if stage.dependsOn }}:
            dependsOn:
              # For each dependency in stage
              - ${{ each dependency in stage.dependsOn }}:
                # If stage depends on code stage and jobs in code param
                - ${{ if and(eq(dependency, 'code'), gt(length(parameters.code), 0)) }}:
                  - ${{ dependency }}
                # If stage depends on build stage and jobs in build param
                - ${{ if and(eq(depends, 'build'), gt(length(parameters.build), 0)) }}:
                  - ${{ dependency }}
                # If stage depends on deploy stage and jobs in deploy param
                - ${{ if and(eq(dependency, 'deploy'), gt(length(parameters.deploy), 0)) }}:
                  - ${{ dependency }}
                # If stage depends on test stage and jobs in test param
                - ${{ if and(eq(dependency, 'test'), gt(length(parameters.test), 0)) }}:
                  - ${{ dependency }}
                # If stage depends on promote stage and jobs in promote param
                - ${{ if and(eq(dependency, 'promote'), gt(length(parameters.promote), 0)) }}:
                  - ${{ dependency }}
                - ${{ if not(in(dependency, 'code', 'build', 'deploy', 'test', 'promote')) }}:
                  - ${{ dependency }}
          ${{ if stage.condition }}:
            condition: ${{ stage.condition }} 
          jobs:
            # Insert each job in jobList or deploymentList parameter
            - ${{ each job in parameter }}:
              - ${{ job }}
            - ${{ if gt(length(stage.jobs), 0) }}:
              # If jobs are nested in stages param insert them
              - ${{ each job in stage.jobs }}:
                - ${{ job }}
  ## Insert any additions stages from stageList
  - ${{ if not(in(stage.stage, 'code', 'build', 'deploy', 'test', 'promote')) }}:
    - ${{ stage }}

parameters:
- name: builds
  type: object
  default: []
- name: deploys
  type: object
  default: []
- name: tests
  type: object
  default: []
- name: environments # Name of each item must be dev, dint, acpt, or prod
  type: object
  default: 
  - name: dev
    environment: dev1 # Name of the ADO Environment
    registryService: '' # Required service connection when build enabled
    kubernetesService: '' # Required service connection when deploy enabled
    build: true
    deploy: true
    promote: true
    reject: true
    test: true
  - name: dint
    environment: dint1
    kubernetesService: ''
    build: false
    deploy: true
    promote: true
    reject: true
    test: true
  - name: acpt
    environment: acpt1
    registryService: ''
    kubernetesService: ''
    build: true
    deploy: true
    promote: true
    reject: true
    test: true
  - name: prod
    environment: prod1
    registryService: ''
    kubernetesService: ''
    build: true
    deploy: true
    promote: true
    reject: true
    test: true
- name: devStages # Inserts each stage into stages
  type: stageList
  default:
  - stage: devBuild # Insert codeAnalysis and containerImage jobs
    dependsOn: []
    condition: succeeded()
  - stage: devDeploy # Insert kubeManifest deployments
    dependsOn: devBuild
    condition: succeeded()
  - stage: devPromote # Insert kubeManifest promote and reject deployments
    dependsOn: devDeploy
    condition: succeeded()
  - stage: devTests # Insert visualStudio test jobs
    dependsOn: devPromote
    condition: succeeded()

- name: buildPool
  type: object
  default:
    vmImage: 'Ubuntu-16.04'
- name: deployPool
  type: object
  default:
    vmImage: 'ubuntu-18.04'

stages:
- template: ../pipeline.yaml
  parameters:
    ${{ if parameters.devStages }}:
      devStages:
      ${{ each dev in parameters.devStages }}:
        ${{ if and(eq(dev.stage, 'devBuild'), gt(length(parameters.builds), 0)) }}:
          stage: ${{ dev.stage }} 
          dependsOn: ${{ dev.dependsOn }} 
          condition: ${{ dev.condition }} 
        ${{ if and(or(eq(dev.stage, 'devDeploy'), eq(dev.stage, 'devPromote')), gt(length(parameters.deploys), 0)) }}:
          stage: ${{ dev.stage }} 
          dependsOn: ${{ dev.dependsOn }} 
          condition: ${{ dev.condition }} 
        ${{ if and(eq(dev.stage, 'devTests'), gt(length(parameters.tests), 0)) }}:
          stage: ${{ dev.stage }} 
          dependsOn: ${{ dev.dependsOn }} 
          condition: ${{ dev.condition }} 

    ${{ each environment in parameters.environments }}:
      # If build is true for environment and builds param has at least one item
      ${{ if environment.build }}:
        ${{ environment.name }}Build:
        # Then add build jobs for each item in builds param
        - ${{ each image in parameters.builds  }}:
          - job: ${{ image.name }}
            steps:
            - template: ../steps/build/containerImage.yaml
              parameters:
                containerRegistry: ${{ environment.registryService }}
                ${{ each item in image }}:
                  ${{ if ne(item.key, 'name') }}:
                    ${{ item.key }}: ${{ item.value }}
      # If deploy is true for environment and deploys param has at least one item
      ${{ if and(environment.deploy, gt(length(parameters.deploys), 0)) }}:
        ${{ environment.name }}Deploy:
        # Then add deployment jobs for each item in deploys param
        - ${{ each deploy in parameters.deploys }}:
          - deployment: ${{ deploy.name }}
            environment: ${{ environment.name }}
            pool: 
            strategy: 
              runOnce:
                deploy:
                  steps:
                  - template: ../steps/deploy/kubeManifests.yaml
                    parameters:
                      kubernetesService: ${{ environment.kubernetesService }}
                      ${{ if and(environment.deploy, not(environment.promote), not(environment.reject)) }}:
                        kubeStrategy: ''
                      ${{ if and(environment.deploy, or(environment.promote, environment.reject)) }}:
                        kubeStrategy: canary
                      action: deploy
                      ${{ each item in deploy }}:
                        ${{ if ne(item.key, 'name') }}:
                          ${{ item.key }}: ${{ item.value }}
      ${{ if and(or(environment.promote, environment.reject), gt(length(parameters.deploys), 0)) }}:
        ${{ environment.name }}Promote:
        - ${{ each deploy in parameters.deploys }}:
          - ${{ if environment.promote }}:
            - deployment: '${{ deploy.name }}Promote'
              environment: ${{ environment.name }}
              strategy: 
                runOnce:
                  deploy:
                    steps:
                    - template: ../steps/deploy/kubeManifests.yaml
                      parameters:
                        kubernetesService: ${{ environment.kubernetesService }}
                        kubeStrategy: canary
                        action: promote
                        ${{ each item in deploy }}:
                          ${{ if ne(item.key, 'name') }}:
                            ${{ item.key }}: ${{ item.value }}
          - ${{ if environment.reject }}:
            - deployment: '${{ deploy.name }}Reject'
              environment: ${{ environment.name }}
              dependsOn: '${{ deploy.name }}Promote'
              strategy: 
                runOnce:
                  deploy:
                    steps:
                    - template: ../steps/deploy/kubeManifests.yaml
                      parameters:
                        kubernetesService: ${{ environment.kubernetesService }}
                        kubeStrategy: canary
                        action: reject
                        ${{ each item in deploy }}:
                          ${{ if ne(item.key, 'name') }}:
                            ${{ item.key }}: ${{ item.value }}
      # If test is true for environment and tests param has at least one item
      ${{ if environment.test }}:
        ${{ environment.name }}Tests:
        # Then add test jobs for each item in tests param
        - ${{ each test in parameters.tests  }}:
          - job: ${{ test.name }}
            steps:
            - template: ../steps/test/visualStudio.yaml
              parameters:
                containerRegistry: ${{ environment.registryService }}
                ${{ each item in test }}:
                  ${{ if ne(item.key, 'name') }}:
                    ${{ item.key }}: ${{ item.value }}

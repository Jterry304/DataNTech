parameters:
- name: clean # When nesting the dotNetCore.yaml into another steps template set clean: false
  type: boolean
  default: false
# preSteps
- name: preSteps
  type: stepList
  default: []
- name: checkout # When nesting the dotNetCore.yaml into another steps template set checkout: false
  type: string
  default: self
- name: submodules
  type: string
  default: false
- name: download # When nesting the dotNetCore.yaml into another steps template set download: false
  type: string
  default: current
- name: downloadArtifact
  type: string
  default: ''
- name: downloadPath
  type: string
  default: ''
# postSteps
- name: postSteps
  type: stepList
  default: []
- name: publishArtifact
  type: string
  default: '$(Build.BuildNumber)_$(System.StageName)_$(Agent.JobName)'
- name: publishEnabled
  type: boolean
  default: true
# Use dotNet
- name: dotNetType
  type: string
  default: sdk
  values:
  - sdk
  - runtime
- name: dotNetVersion
  type: string
  default: '3.1.x'
# dotNet Core CLI
- name: dotNetCommand
  type: string
  default: build
  values:
  - build
  - publish
  - pack
  - restore
- name: dotNetProjects # Required param to restore and publish a dotNet project
  type: string
  default: ''
- name: dotNetArguments
  type: string
  default: ''
- name: dotNetFeed
  type: string
  default: ''
- name: nuGetFeedType
  type: string
  default: internal
  values:
  - internal
  - external
- name: dotNetPublishWebProjects
  type: boolean
  default: false
# dotNet Pack
- name: includeSymbols # Publish Symbols
  type: boolean
  default: true
- name: versioningScheme # byEnvVar is default, set value or EnvVar
  type: string
  default: byEnvVar
  values:
  - off
  - byPrereleaseNumber
  - byEnvVar
  - byBuildNumber
- name: versionEnvVar # Name of environment variable to use for version number
  type: string
  default: NugetVersion
- name: dotNetConfiguration
  type: string
  default: Release
- name: dotNetPush # enables dotNet push after dotNet pack
  type: boolean
  default: true
- name: searchPatternPush
  type: string
  default: '$(Build.ArtifactStagingDirectory)/*.nupkg'
- name: outputDir
  type: string
  default: '$(Build.ArtifactStagingDirectory)'
- name: includeNuGetOrg
  type: boolean
  default: true
- name: externalEndpoints
  type: string
  default: ''

steps:
- template: ../preSteps.yaml
  parameters:
    clean: ${{ parameters.clean }}
    checkout: ${{ parameters.checkout }}
    submodules: ${{ parameters.submodules }}
    download: ${{ parameters.download }}
    artifact: ${{ parameters.downloadArtifact }}
    preSteps: ${{ parameters.preSteps }}
- ${{ if parameters.dotNetVersion }}:
  - task: UseDotNet@2
    displayName: 'Use dotNet Core ${{ parameters.dotNetType }} ${{ parameters.dotNetVersion }}'
    inputs:
      packageType: ${{ parameters.dotNetType }}
      version: ${{ parameters.dotNetVersion }}
- task: DotNetCoreCLI@2
  displayName: 'dotNet restore ${{ parameters.dotNetProjects }}'
  inputs:
    command: restore
    projects: '${{ parameters.dotNetProjects }}'
    feedsToUse: 'select'
    vstsFeed: '${{ parameters.dotNetFeed }}'
    includeNuGetOrg: ${{ parameters.includeNuGetOrg }}
- ${{ if in(parameters.dotNetCommand, 'build', 'publish') }}:
  - task: DotNetCoreCLI@2
    displayName: 'dotNet ${{ parameters.dotNetCommand }} ${{ parameters.dotNetProjects }}'
    inputs:
      command: ${{ parameters.dotNetCommand }}
      ${{ if parameters.dotNetFeed }}:
        vstsFeed: ${{ parameters.dotNetFeed }}
      projects: '${{ parameters.dotNetProjects }}'
      includeNuGetOrg: ${{ parameters.includeNuGetOrg }}
      arguments: --no-restore --output ${{ parameters.outputDir }} ${{ parameters.dotNetArguments }}'
      ${{ if and(eq(parameters.dotNetCommand, 'publish'), parameters.dotNetPublishWebProjects) }}:
        publishWebProjects: '${{ parameters.dotNetPublishWebProjects }}'
- ${{ if eq(parameters.dotNetCommand, 'pack') }}:
  - task: DotNetCoreCLI@2
    displayName: 'dotNet ${{ parameters.dotNetCommand }} ${{ parameters.dotNetProjects }}'
    inputs:
      command: pack
      ${{ if parameters.dotNetFeed }}:
        vstsFeed: ${{ parameters.dotNetFeed }}
      includeNuGetOrg: ${{ parameters.includeNuGetOrg }}
      packagesToPack: '${{ parameters.dotNetProjects }}'
      configuration: '${{ parameters.dotNetConfiguration }}'
      outputDir: '${{ parameters.outputDir }}'
      includesymbols: '${{ parameters.includeSymbols }}'
      versioningScheme: '${{ parameters.versioningScheme }}'
      ${{ if eq(parameters.versioningScheme, 'byEnvVar') }}:
        versionEnvVar: '${{ parameters.versionEnvVar }}'
  - ${{ if parameters.includeSymbols }}:
    - task: PublishSymbols@2
      displayName: 'Publish Symbols Path'
      inputs:
        SearchPattern: '${{ parameters.outputDir }}/*.pdb'
        publishSymbols: true
        SymbolServerType: TeamServices
  - ${{ if parameters.dotNetPush }}:
    - task: DotNetCoreCLI@2
      displayName: 'dotNet Push NuGet'
      inputs:
        command: push
        searchPatternPush: '${{ parameters.searchPatternPush }}'
        feedPublish: '${{ parameters.dotNetFeed }}'
        nuGetFeedType: ${{ parameters.nuGetFeedType }}
        ${{ if and(parameters.externalEndpoints, eq(parameters.nuGetFeedType, 'external')) }}:
          externalEndpoints: ${{ parameters.externalEndpoints }}
- template: ../postSteps.yaml
  parameters:
    postSteps: ${{ parameters.postSteps }}
    ${{ if and(parameters.publishEnabled, in(parameters.dotNetCommand, 'build', 'publish')) }}:
      artifact: '${{ parameters.publishArtifact }}'
      publish: '${{ parameters.outputDir }}'
    clean: ${{ parameters.clean }}

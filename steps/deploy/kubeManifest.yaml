parameters:
- name: clean
  type: boolean
  default: false
# preSteps
- name: preSteps
  type: stepList
  default: []
- name: checkout
  type: string
  default: self
- name: submodules
  type: string
  default: false
- name: download
  type: string
  default: current
- name: artifactName # Optional to set a specific artifact to download
  type: string
  default: ''
# postSteps
- name: postSteps
  type: stepList
  default: []
# Get Azure KeyVault Params
- name: keyVaultSubscription
  type: string
  default: ''
- name: keyVaultName
  type: string
  default: ''
- name: keyVaultSecretFilter
  type: string
  default: '*'
- name: secretArguments # Kube createSecret secretArguments for Azure KeyVault secrets
  type: object
  default: ''
# Replace Tokens Task
- name: replaceTokens # Enable replace tokens task for kube manifests
  type: boolean
  default: false
- name: replaceTokensRoot # Enable replace tokens task for kube manifests
  type: string
  default: '$(Build.SourcesDirectory)'
# Create imagePullSecret
- name: dockerRegistryEndpoint # Required to enable task. Service connection name to container registry
  type: string
  default: ''
- name: imagePullSecret # Required to enable task. Name of secret to create in Kubernetes
  type: string
  default: ''
# Kube Deployment Params
- name: kubectlVersion # Optional, inserts kube installer task with specific version
  type: string
  default: ''
- name: kubernetesServiceConnection # Required for imagePullSecret create and deployment task. Except when using an ADO Environment Resource then it's not required for the deployment task
  type: string
  default: ''
- name: namespace # Required, namespace in kubernetes cluster
  type: string
  default: default
- name: manifests
  type: object
  default: ''
- name: containers # Update the image tag of a container listed in a manifest spec. e.g. containers: registryURL/repoName/imageName:imageTag would look in the manifest and if it find registryURL/repoName/imageName and update the imageTag
  type: string
  default: ''
- name: rolloutStatusTimeout # Used when action is deploy, promote, or reject
  type: number
  default: 60
- name: strategy
  type: string
  default: '' # canary or null
- name: percentage # Used when strategy is canary
  type: number
  default: 10
- name: trafficSplitMethod # Used when strategy is canary
  type: string
  default: pod
  values:
  - smi
  - pod
- name: baselineAndCanaryReplicas # Used when strategy is canary
  type: number
  default: 1
- name: action # Default deploy; promote or reject prior canary kube deploy
  type: string
  default: deploy
  values:
  - deploy
  - promote
  - reject
  - scale
  - patch
  - delete
# Bake Kubernetes Manifests
- name: kustomizationPath # Optional to render Kustomization templates into Kube Manifests and deploy set this param
  type: string
  default: ''
- name: helmChart # Optional to render helm Charts into Kube Manifests and deploy set this param. Only works with helm charts that contain no CRDs. If the helm chart has CRDs use the helmTemplate steps
  type: string
  default: ''
- name: overrideFiles # Optional overridesFiles when using helmChart
  type: object
  default: ''
- name: overrides # Optional overrides when using helmChart
  type: object
  default: ''
- name: releaseName # Required releaseName when using helmChart
  type: string
  default: ''
- name: dockerComposeFile # To render a docker compose file into a kube manifest and deploy
  type: string
  default: ''
# Scale Kubernetes Deployments
- name: kind # Required when action is scale or patch. The Kubernetes object kind
  type: string
  default: Deployment
- name: name # Required when action is scale or patch. The name of the Kubernetes object to be scaled or patched
  type: string
  default: ''
- name: replicas # Required when action is scale. The number of replicas desired
  type: number
  default: 1
# Patch Kubernetes Deployments
- name: mergeStrategy # Required when action is patch. The merge strategy to be used for applying the patch
  type: string
  default: strategic
  values:
  - strategic
  - merge
  - json
- name: patch # Required when action is patch. The contents of the patch
  type: object
  default: ''
# Delete Kubernetes Deployments
- name: arguments # Required when action is delete. Args to be pass to kubectl for deleting the objects. e.g. arguments: 'deployment myApp'
  type: string
  default: ''

steps:
- template: ../preSteps.yaml
  parameters:
    clean: ${{ parameters.clean }}
    checkout: ${{ parameters.checkout }}
    submodules: ${{ parameters.submodules }}
    download: ${{ parameters.download }}
    artifact: ${{ parameters.artifactName }}
    preSteps: ${{ parameters.preSteps }}
- ${{ if parameters.kubectlVersion }}:
  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: '${{ parameters.kubectlVersion }}'
- ${{ if parameters.keyVaultName }}:
  - task: AzureKeyVault@1
    displayName: 'Get Azure Key Vault ${{ parameters.keyVaultName }}'
    inputs:
      azureSubscription: '${{ parameters.keyVaultSubscription }}'
      KeyVaultName: '${{ parameters.keyVaultName }}'
      SecretsFilter: '${{ parameters.keyVaultSecretFilter }}'
      ${{ if gt(length(parameters.secretArguments), 1) }}:
        runAsPreJob: true
- ${{ if parameters.secretArguments }}:
  - ${{ each secret in parameters.secretArguments }}:
    - task: KubernetesManifest@0
      displayName: 'Deploy secret ${{ secret.key }}'
      inputs:
        action: createSecret
        namespace: '${{ parameters.namespace }}'
        secretType: generic
        secretName: ${{ secret.key }}
        secretArguments: ${{ secret.value }}
        ${{ if parameters.kubernetesServiceConnection }}:
          kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
- ${{ if and(parameters.replaceTokens, or(parameters.manifests, parameters.kustomizationPath, parameters.helmChart, parameters.dockerComposeFile)) }}:
  - task: replacetokens@3
    displayName: 'Replace tokens in Kube Manifests'
    inputs:
      rootDirectory: ${{ parameters.replaceTokensRoot }}
      targetFiles: ${{ parameters.manifests }}
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'
      useLegacyPattern: false
      enableTelemetry: false
      verbosity: 'detailed'
- ${{ if and(parameters.kubernetesServiceConnection, parameters.dockerRegistryEndpoint, parameters.imagePullSecret) }}:
  - task: KubernetesManifest@0
    displayName: 'Create imagePullSecret ${{ parameters.imagePullSecret }} in ${{ parameters.namespace }} namespace'
    inputs:
      action: createSecret
      secretType: dockerRegistry
      secretName: '${{ parameters.imagePullSecret }}'
      dockerRegistryEndpoint: '${{ parameters.dockerRegistryEndpoint }}'
      kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      namespace: '${{ parameters.namespace }}'
- ${{ if or(parameters.kustomizationPath, parameters.helmChart, parameters.dockerComposeFile) }}:
  - task: KubernetesManifest@0
    name: bake
    displayName: 'Bake Manifests for Deployment'
    inputs:
      action: 'bake'
      ${{ if parameters.kustomizationPath }}:
        renderType: kustomize
        kustomizationPath: ${{ parameters.kustomizationPath }}
      ${{ if parameters.helmChart }}:
        renderType: helm2
        helmChart: ${{ parameters.helmChart }}
        overrideFiles: ${{ parameters.overrideFiles }}
        overrides: ${{ parameters.overrides }}
        releaseName: ${{ parameters.releaseName }}
      ${{ if parameters.dockerComposeFile }}:
        renderType: kompose
        dockerComposeFile: ${{ parameters.dockerComposeFile }}
- ${{ if and(in(parameters.action, 'deploy', 'promote', 'reject'), or(parameters.manifests, parameters.kustomizationPath, parameters.helmChart, parameters.dockerComposeFile)) }}:
  - task: KubernetesManifest@0
    displayName: '${{ parameters.action }} to ${{ parameters.kubernetesServiceConnection }} ${{ parameters.namespace }} namespace'
    inputs:
      action: '${{ parameters.action }}'
      ${{ if parameters.kubernetesServiceConnection }}:
        kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      namespace: '${{ parameters.namespace }}'
      ${{ if parameters.imagePullSecret }}:
        imagePullSecrets: '${{ parameters.imagePullSecret }}'
      ${{ if parameters.manifests }}:
        manifests: ${{ parameters.manifests }}
      ${{ if and(not(parameters.manifests), or(parameters.kustomizationPath, parameters.helmChart, parameters.dockerComposeFile)) }}:
        manifests: $(bake.manifestsBundle)
      rolloutStatusTimeout: '${{ parameters.rolloutStatusTimeout }}'
      ${{ if parameters.containers }}:
        containers: '${{ parameters.containers }}'
      ${{ if eq(parameters.strategy, 'canary') }}:
        strategy: canary
        percentage: '${{ parameters.percentage }}'
        trafficSplitMethod: '${{ parameters.trafficSplitMethod }}'
        ${{ if eq(parameters.trafficSplitMethod, 'smi') }}:
          baselineAndCanaryReplicas: '${{ parameters.baselineAndCanaryReplicas }}'
- ${{ if and(eq(parameters.action, 'scale'), parameters.name) }}:
  - task: KubernetesManifest@0
    displayName: '${{ parameters.action }} ${{ parameters.name }} ${{ parameters.kind }} in ${{ parameters.namespace }} namespace'
    inputs:
      ${{ if parameters.kubernetesServiceConnection }}:
        kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      action: '${{ parameters.action }}'
      namespace: '${{ parameters.namespace }}'
      kind: '${{ parameters.kind }}'
      name: '${{ parameters.name }}'
      replicas: ${{ parameters.replicas }}
- ${{ if and(eq(parameters.action, 'patch'), parameters.name, parameters.patch) }}:
  - task: KubernetesManifest@0
    displayName: '${{ parameters.action }} ${{ parameters.name }} ${{ parameters.kind }} in ${{ parameters.namespace }} namespace'
    inputs:
      ${{ if parameters.kubernetesServiceConnection }}:
        kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      action: '${{ parameters.action }}'
      namespace: '${{ parameters.namespace }}'
      kind: '${{ parameters.kind }}'
      name: '${{ parameters.name }}'
      mergeStrategy: ${{ parameters.mergeStrategy }}
      patch: ${{ parameters.patch }}
- ${{ if and(eq(parameters.action, 'delete'), parameters.arguments) }}:
  - task: KubernetesManifest@0
    displayName: '${{ parameters.action }} ${{ parameters.arguments }} in ${{ parameters.namespace }} namespace'
    inputs:
      ${{ if parameters.kubernetesServiceConnection }}:
        kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      action: '${{ parameters.action }}'
      namespace: '${{ parameters.namespace }}'
      arguments: '${{ parameters.arguments }}'
- template: ../postSteps.yaml
  parameters:
    postSteps: ${{ parameters.postSteps }}
    clean: ${{ parameters.clean }}

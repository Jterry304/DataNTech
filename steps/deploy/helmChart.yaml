parameters:
- name: clean
  type: boolean
  default: false
# preSteps
- name: preSteps
  type: stepList
  default: []
- name: checkout
  type: string
  default: self
- name: submodules
  type: string
  default: false
- name: download
  type: string
  default: none
- name: downloadArtifact
  type: string
  default: ''
# postSteps
- name: postSteps
  type: stepList
  default: []
- name: artifactName
  type: string
  default: '$(Build.BuildNumber)_$(System.StageName)_$(Agent.JobName)'
# Get Azure KeyVault Params
- name: keyVaultSubscription
  type: string
  default: ''
- name: keyVaultName
  type: string
  default: ''
- name: keyVaultSecretFilter
  type: string
  default: '*'
- name: replaceTokensTargets # Replace tokens in chart and values file
  type: object
  default: |
    **/*.yaml
# Helm Installer
- name: helmVersion
  type: string
  default: '3.1.3'
- name: kubectlVersion
  type: string
  default: '1.18.6'
# Create imagePullSecret
- name: dockerRegistryEndpoint # Required to enable task. Service connection name to container registry
  type: string
  default: ''
- name: imagePullSecret # Required to enable task. Name of secret to create in Kubernetes
  type: string
  default: ''
# Helm Deploy
- name: enableHelmDeploy
  type: boolean
  default: true
- name: kubernetesServiceConnection # Use either environmentResource or kubernetesServiceConnection
  type: string
  default: ''
- name: namespace # Required param for kube namespace
  type: string
- name: helmCommand # Helm deploy command
  type: string
  default: 'upgrade'
- name: helmChartPath # Root path of helm charts
  type: string
  default: '$(Pipeline.Workspace)'
- name: helmReleaseName
  type: string
  default: '$(Build.DefinitionName)'
- name: helmOverrideValues
  type: string
  default: ''
- name: helmValueFile # File path to values
  type: string
  default: '$(Pipeline.Workspace)/values.yaml'
- name: helmInstall # When command is upgrade install if not already done
  type: boolean
  default: true
- name: helmForce
  type: boolean
  default: true
- name: helmResetValues
  type: boolean
  default: false
- name: helmWaitForExecution
  type: boolean
  default: true
- name: helmFailOnStderr
  type: boolean
  default: false
# Archive Helm Charts and Pipeline Publish
- name: archiveArtifacts
  type: boolean
  default: false
- name: archiveFile
  type: string
  default: '$(Pipeline.Workspace)/HelmCharts'
- name: archiveType
  type: string
  default: 'zip'
  values:
  - 'tar.gz'
  - 'zip'

steps:
- template: ../preSteps.yaml
  parameters:
    clean: ${{ parameters.clean }}
    checkout: ${{ parameters.checkout }}
    submodules: ${{ parameters.submodules }}
    download: ${{ parameters.download }}
    artifact: ${{ parameters.downloadArtifact }}
    preSteps: ${{ parameters.preSteps }}
- ${{ if parameters.keyVaultName }}:
  - task: AzureKeyVault@1
    displayName: 'Get Azure Key Vault ${{ parameters.keyVaultName }}'
    inputs:
      azureSubscription: '${{ parameters.keyVaultSubscription }}'
      KeyVaultName: '${{ parameters.keyVaultName }}'
      SecretsFilter: '${{ parameters.keyVaultSecretFilter }}'
- task: replacetokens@3
  displayName: 'Replace tokens in Helm Charts'
  inputs:
    rootDirectory: '${{ parameters.helmChartPath }}'
    targetFiles: ${{ parameters.replaceTokensTargets }}
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'
    useLegacyPattern: false
    enableTelemetry: false
- ${{ if and(parameters.kubernetesServiceConnection, parameters.dockerRegistryEndpoint, parameters.imagePullSecret) }}:
  - task: KubernetesManifest@0
    displayName: 'Create imagePullSecret ${{ parameters.imagePullSecret }} in ${{ parameters.namespace }} namespace'
    inputs:
      action: createSecret
      secretType: dockerRegistry
      secretName: '${{ parameters.imagePullSecret }}'
      dockerRegistryEndpoint: '${{ parameters.dockerRegistryEndpoint }}'
      kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      namespace: '${{ parameters.namespace }}'
- ${{ if and(parameters.helmVersion, parameters.kubectlVersion) }}:
  - task: HelmInstaller@0
    displayName: 'Install Helm ${{ parameters.helmVersion }} and Kubectl ${{ parameters.kubectlVersion }}'
    inputs:
      helmVersion: '${{ parameters.helmVersion }}'
      checkLatestHelmVersion: false
      kubectlVersion: '${{ parameters.kubectlVersion }}'
      checkLatestKubectl: false
- ${{ if parameters.enableHelmDeploy }}:
  - task: HelmDeploy@0
    displayName: 'Helm ${{ parameters.helmCommand }} of ${{ parameters.helmReleaseName }} in ${{ parameters.namespace }}'
    inputs:
      ${{ if parameters.kubernetesServiceConnection }}:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
      namespace: '${{ parameters.namespace }}'
      command: '${{ parameters.helmCommand }}'
      chartType: FilePath
      chartPath: '${{ parameters.helmChartPath }}'
      releaseName: '${{ parameters.helmReleaseName }}'
      overrideValues: '${{ parameters.helmOverrideValues }}'
      valueFile: '${{ parameters.helmValueFile }}'
      install: '${{ parameters.helmInstall }}'
      force: '${{ parameters.helmForce }}'
      recreate: false
      resetValues: '${{ parameters.helmResetValues }}'
      waitForExecution: '${{ parameters.helmWaitForExecution }}'
      failOnStderr: '${{ parameters.helmFailOnStderr }}'
- ${{ if parameters.archiveArtifacts }}:
  - task: ArchiveFiles@2
    displayName: 'Archive Helm Chart Artifacts'
    inputs:
      rootFolderOrFile: '${{ parameters.helmChartPath }}'
      includeRootFolder: false
      archiveFile: '${{ parameters.archiveFile }}.${{ parameters.archiveType }}'
      ${{ if eq(parameters.archiveType, 'tar.gz') }}:
        archiveType: tar
        tarCompression: gz
      ${{ if eq(parameters.archiveType, 'zip') }}:
        archiveType: zip
      replaceExistingArchive: true
- template: ../postSteps.yaml
  parameters:
    postSteps: ${{ parameters.postSteps }}
    ${{ if parameters.archiveArtifacts }}:
      publish: '${{ parameters.archiveFile }}.${{ parameters.archiveType }}'
      artifact: ${{ parameters.artifactName }}
    clean: ${{ parameters.clean }}

parameters:
- name: clean
  type: boolean
  default: false
# preSteps
- name: preSteps
  type: stepList
  default: []
- name: checkout
  type: string
  default: self
- name: submodules
  type: string
  default: false
- name: download
  type: string
  default: current
- name: downloadArtifact
  type: string
  default: ''
# postSteps
- name: postSteps
  type: stepList
  default: []
- name: publish
  type: string
  default: ''
- name: publishArtifact
  type: string
  default: ''
# Use dotNet
- name: dotNetType
  type: string
  default: sdk
  values:
  - sdk
  - runtime
- name: dotNetVersion
  type: string
  default: '3.1.x'
# dotNet Build and Restore Params
- name: dotNetProjects # dotNet projects or vs solution for dotNet build and restore
  type: string
- name: dotNetFeed # default dotNet artifact feed
  type: string
  default: ''
- name: dotNetArguments # default dotNet build arguments
  type: string
  default: ''
- name: dotNetCommand
  type: string
  default: build
  values:
  - restore
  - build
  - publish
# SonarQube Params
- name: sonarQube # SonarQube Service Connection Name
  type: string
  default: ''
- name: sonarQubeScannerMode
  type: string
  default: 'MSBuild'
- name: sonarQubeProjectKey
  type: string
  default: ''
- name: sonarQubeProjectName
  type: string
  default: ''
- name: sonarQubeProjectVersion
  type: string
  default: '$(Build.BuildId)'
- name: sonarQubeExtraProperties
  type: string
  default: 'sonar.coverage.exclusions=**/**Tests*.cs,**/**Wrapper*.cs,**/**Fa√ßade*.cs,**/**Creator*.cs,**/**Program.cs'
- name: sonarQubePollingTimeoutSec
  type: number
  default: 300

steps:
- template: ../preSteps.yaml
  parameters:
    clean: ${{ parameters.clean }}
    checkout: ${{ parameters.checkout }}
    submodules: ${{ parameters.submodules }}
    download: ${{ parameters.download }}
    artifact: ${{ parameters.downloadArtifact }}
    preSteps: ${{ parameters.preSteps }}
- ${{ if parameters.sonarQube }}:
  - task: SonarQubePrepare@4
    displayName: 'Prepare analysis with SonarQube'
    inputs:
      SonarQube: '${{ parameters.sonarQube }}'
      scannerMode: '${{ parameters.sonarQubeScannerMode }}'
      projectKey: '${{ parameters.sonarQubeProjectKey }}'
      projectName: '${{ parameters.sonarQubeProjectName }}'
      projectVersion: '${{ parameters.sonarQubeProjectVersion }}'
      extraProperties: '${{ parameters.sonarQubeExtraProperties }}'
- ${{ if parameters.dotNetProjects }}:
  - template: dotNetCore.yaml
    parameters:
      clean: false
      checkout: false
      download: false
      dotNetCommand: ${{ parameters.dotNetCommand }}
      dotNetType: ${{ parameters.dotNetType }}
      dotNetVersion: ${{ parameters.dotNetVersion }}
      dotNetProjects: ${{ parameters.dotNetProjects }}
      dotNetFeed: ${{ parameters.dotNetFeed }}
      dotNetArguments: ${{ parameters.dotNetArguments }}
- ${{ if parameters.sonarQube }}:
  - task: SonarQubeAnalyze@4
    displayName: 'Run SonarQube Analysis'
  - task: SonarQubePublish@4
    displayName: 'Publish SonarQube Quality Gate Result'
    inputs:
      pollingTimeoutSec: '${{ parameters.sonarQubePollingTimeoutSec }}'
- template: ../postSteps.yaml
  parameters:
    postSteps: ${{ parameters.postSteps }}
    publish: ${{ parameters.publish }}
    artifact: ${{ parameters.publishArtifact }}
    clean: ${{ parameters.clean }}
